import hashlib
import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from threading import Thread
from datetime import datetime

scan_paused = False
scan_stopped = False

def calculate_hash(file_path, hash_algorithm):
    """Calculate the hash of a file using the specified algorithm."""
    hasher = hashlib.new(hash_algorithm)
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hasher.update(chunk)
    return hasher.hexdigest()

def build_signature_database(directory_path, hash_algorithm):
    """Build a database of malware signatures from a directory of malware samples."""
    signature_database = set()
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            signature = calculate_hash(file_path, hash_algorithm)
            signature_database.add(signature)
    return signature_database

def update_progress_label(progress):
    """Update the progress label with the current progress."""
    progress_label.config(text=f"{progress:.2f}%")

def scan_file(file_path, known_signatures, progress_var, results_text, total_files, scan_logs, hash_algorithm):
    """Scan a file for known malware signatures."""
    global scan_paused, scan_stopped
    file_signature = calculate_hash(file_path, hash_algorithm)
    scan_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    with open(scan_logs, "a") as log_file:
        if file_signature in known_signatures:
            messagebox.showwarning("Malware Detected", f"File '{file_path}' is flagged as malicious!")
            log_file.write(f"{scan_time}: File '{file_path}' is flagged as malicious!\n")
        else:
            results_text.insert(tk.END, f"File '{file_path}' is clean.\n")
            log_file.write(f"{scan_time}: File '{file_path}' is clean.\n")
    results_text.see(tk.END)  
    progress_var.set(progress_var.get() + 1)
    progress = (progress_var.get() / total_files) * 100
    progress_bar['value'] = progress  
    update_progress_label(progress)

def scan_directory(directory_path, known_signatures, progress_var, hash_algorithm):
    """Scan all files in a directory for known malware signatures."""
    global scan_paused, scan_stopped
    results_text.delete(1.0, tk.END) 
    total_files = sum(len(files) for _, dirs, files in os.walk(directory_path))
    progress_var.set(0)
    scan_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    scan_logs = f"scan_logs_{scan_time}.txt" 
    for root, dirs, files in os.walk(directory_path):
        if scan_stopped:  # Check if stop button is pressed
            break
        for file in files:
            if scan_paused:  # Check if pause button is pressed
                while scan_paused:
                    root.update()
            if scan_stopped:  # Check if stop button is pressed
                break
            file_path = os.path.join(root, file)
            scan_file(file_path, known_signatures, progress_var, results_text, total_files, scan_logs, hash_algorithm)
    if scan_stopped:
        messagebox.showinfo("Scan Stopped", "Scanning stopped!")
    else:
        messagebox.showinfo("Scan Complete", "Scanning complete! Scan logs are saved in a text file.")
    scan_paused = False
    scan_stopped = False
    # Enable the scan more button after scanning is complete
    scan_more_button.config(state=tk.NORMAL)

def browse_file():
    """Open a file dialog to select a file for scanning."""
    file_path = filedialog.askopenfilename()
    if file_path:
        directory_entry.delete(0, tk.END)
        directory_entry.insert(0, file_path)

def browse_directory():
    """Open a directory dialog to select a directory for scanning."""
    directory_path = filedialog.askdirectory()
    if directory_path:
        directory_entry.delete(0, tk.END)
        directory_entry.insert(0, directory_path)

def scan_gui(hash_algorithm):
    """Initiate the scanning process."""
    # Disable the scan more button while scanning is in progress
    scan_more_button.config(state=tk.DISABLED)
    path = directory_entry.get()
    if os.path.isfile(path):
        known_signatures = build_signature_database(malware_directory, hash_algorithm)
        progress_var = tk.DoubleVar()
        Thread(target=scan_file, args=(path, known_signatures, progress_var, results_text, 1, "", hash_algorithm)).start()
    elif os.path.isdir(path):
        known_signatures = build_signature_database(malware_directory, hash_algorithm)
        progress_var = tk.DoubleVar()
        Thread(target=scan_directory, args=(path, known_signatures, progress_var, hash_algorithm)).start()
    else:
        messagebox.showerror("Error", "Invalid path!")

def scan_more():
    """Reset UI elements related to scanning."""
    results_text.delete(1.0, tk.END)
    directory_entry.delete(0, tk.END)
    progress_bar['value'] = 0
    progress_label.config(text="")

def pause_scan():
    """Pause the scanning process."""
    global scan_paused
    scan_paused = True

def stop_scan():
    """Stop the scanning process."""
    global scan_stopped
    scan_stopped = True

if __name__ == "__main__":
    malware_directory = '/path/to/malware/samples'

    root = tk.Tk()
    root.title("Malware Scanner")
    root.geometry("600x400")  # Set window size

    # Styling
    root.configure(bg="#f0f0f0")  # Background color

    # Label and entry for file/directory selection
    directory_label = tk.Label(root, text="File/Directory to Scan:", bg="#f0f0f0", font=("Helvetica", 12))
    directory_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")
    directory_entry = tk.Entry(root, width=50, font=("Helvetica", 10))
    directory_entry.grid(row=0, column=1, padx=10, pady=5)
    browse_file_button = tk.Button(root, text="Browse File", command=browse_file, bg="#4caf50", fg="white", font=("Helvetica", 10))
    browse_file_button.grid(row=0, column=2, padx=5, pady=5)
    browse_directory_button = tk.Button(root, text="Browse Directory", command=browse_directory, bg="#4caf50", fg="white", font=("Helvetica", 10))
    browse_directory_button.grid(row=0, column=3, padx=5, pady=5)

    # Hash algorithm selection
    hash_algorithm_label = tk.Label(root, text="Select Hash Algorithm:", bg="#f0f0f0", font=("Helvetica", 12))
    hash_algorithm_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")
    hash_algorithm_var = tk.StringVar(value="sha256")  # Default to SHA-256
    hash_algorithm_options = ["sha256", "md5", "sha1", "sha512", "crc32"]
    hash_algorithm_dropdown = ttk.Combobox(root, textvariable=hash_algorithm_var, values=hash_algorithm_options, state="readonly", width=10)
    hash_algorithm_dropdown.grid(row=1, column=1, padx=10, pady=5)

    # Scan button
    scan_button = tk.Button(root, text="Scan", command=lambda: scan_gui(hash_algorithm_var.get()), bg="#008CBA", fg="white", font=("Helvetica", 12))
    scan_button.grid(row=2, column=1, padx=10, pady=5)

    # Progress bar
    progress_bar = ttk.Progressbar(root, orient='horizontal', length=300, mode='determinate')
    progress_bar.grid(row=3, columnspan=4, padx=10, pady=5)

    # Progress percentage label
    progress_label = tk.Label(root, text="", bg="#f0f0f0", font=("Helvetica", 10))
    progress_label.grid(row=3, column=1, padx=5, pady=5, sticky="w")

    # Scan results
    results_label = tk.Label(root, text="Scan Results:", bg="#f0f0f0", font=("Helvetica", 12))
    results_label.grid(row=4, column=0, padx=10, pady=5, sticky="w")
    results_text = tk.Text(root, width=60, height=10, font=("Helvetica", 10))
    results_text.grid(row=5, column=0, columnspan=4, padx=10, pady=5, sticky="w")
    results_text.config(state=tk.NORMAL)

    # Buttons to pause, stop, and scan more
    pause_button = tk.Button(root, text="Pause", command=pause_scan, bg="#f44336", fg="white", font=("Helvetica", 12))
    pause_button.grid(row=6, column=0, padx=10, pady=5)
    stop_button = tk.Button(root, text="Stop", command=stop_scan, bg="#f44336", fg="white", font=("Helvetica", 12))
    stop_button.grid(row=6, column=1, padx=10, pady=5)
    scan_more_button = tk.Button(root, text="Scan More", command=scan_more, bg="#4caf50", fg="white", font=("Helvetica", 12))
    scan_more_button.grid(row=6, column=2, padx=10, pady=5)

    root.mainloop()
