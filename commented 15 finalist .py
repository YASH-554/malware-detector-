import hashlib  # Library for hashing functions
import os  # Library for interacting with the operating system
import tkinter as tk  # GUI library
from tkinter import filedialog, messagebox, ttk  # Specific modules for GUI components
from threading import Thread  # Library for multithreading
from datetime import datetime  # Library for date and time manipulation

# Global variables to control scanning process
scan_paused = False  # Flag to pause scanning
scan_stopped = False  # Flag to stop scanning

def calculate_hash(file_path, hash_algorithm):
    """Calculate the hash of a file using the specified algorithm."""
    hasher = hashlib.new(hash_algorithm)  # Initialize hasher with specified algorithm
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):  # Read file in chunks
            hasher.update(chunk)  # Update hasher with each chunk
    return hasher.hexdigest()  # Return hexadecimal digest of the file

def build_signature_database(directory_path, hash_algorithm):
    """Build a database of malware signatures from a directory of malware samples."""
    signature_database = set()  # Initialize an empty set to store unique signatures
    for root, dirs, files in os.walk(directory_path):  # Traverse directory tree
        for file in files:
            file_path = os.path.join(root, file)  # Get full path of the file
            signature = calculate_hash(file_path, hash_algorithm)  # Calculate hash of the file
            signature_database.add(signature)  # Add hash to the signature database
    return signature_database  # Return the signature database

def update_progress_label(progress):
    """Update the progress label with the current progress."""
    progress_label.config(text=f"{progress:.2f}%")  # Update progress label text

def scan_file(file_path, known_signatures, progress_var, results_text, total_files, scan_logs, hash_algorithm):
    """Scan a file for known malware signatures."""
    global scan_paused, scan_stopped
    file_signature = calculate_hash(file_path, hash_algorithm)  # Calculate hash of the file
    scan_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")  # Get current time
    with open(scan_logs, "a") as log_file:  # Open log file for appending
        if file_signature in known_signatures:  # Check if file signature is in known signatures
            messagebox.showwarning("Malware Detected", f"File '{file_path}' is flagged as malicious!")  # Show warning message
            log_file.write(f"{scan_time}: File '{file_path}' is flagged as malicious!\n")  # Write to log file
            # Add code to report the malware to a database
        else:
            results_text.insert(tk.END, f"File '{file_path}' is clean.\n")  # Insert result into text box
            log_file.write(f"{scan_time}: File '{file_path}' is clean.\n")  # Write to log file
    results_text.see(tk.END)  # Scroll to the end of the text
    progress_var.set(progress_var.get() + 1)  # Update progress variable
    progress = (progress_var.get() / total_files) * 100  # Calculate progress percentage
    progress_bar['value'] = progress  # Update progress bar
    update_progress_label(progress)  # Update progress label

def scan_directory(directory_path, known_signatures, progress_var, hash_algorithm):
    """Scan all files in a directory for known malware signatures."""
    global scan_paused, scan_stopped
    results_text.delete(1.0, tk.END)  # Clear previous results
    total_files = sum(len(files) for _, dirs, files in os.walk(directory_path))  # Calculate total files
    progress_var.set(0)  # Reset progress
    scan_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")  # Get current time
    scan_logs = f"scan_logs_{scan_time}.txt"  # Text file to save scan logs
    for root, dirs, files in os.walk(directory_path):  # Traverse directory tree
        if scan_stopped:  # Check if stop button is pressed
            break
        for file in files:
            if scan_paused:  # Check if pause button is pressed
                while scan_paused:
                    root.update()  # Update GUI to respond to pause action
            if scan_stopped:  # Check if stop button is pressed
                break
            file_path = os.path.join(root, file)  # Get full path of the file
            scan_file(file_path, known_signatures, progress_var, results_text, total_files, scan_logs, hash_algorithm)  # Scan the file
    if scan_stopped:
        messagebox.showinfo("Scan Stopped", "Scanning stopped!")  # Show info message for stopping
    else:
        messagebox.showinfo("Scan Complete", "Scanning complete! Scan logs are saved in a text file.")  # Show info message for completion
    scan_paused = False  # Reset pause flag
    scan_stopped = False  # Reset stop flag
    # Enable the scan more button after scanning is complete
    scan_more_button.config(state=tk.NORMAL)

def browse_file():
    """Open a file dialog to select a file for scanning."""
    file_path = filedialog.askopenfilename()  # Open file dialog
    if file_path:  # If file path is selected
        directory_entry.delete(0, tk.END)  # Clear directory entry
        directory_entry.insert(0, file_path)  # Insert file path into entry

def browse_directory():
    """Open a directory dialog to select a directory for scanning."""
    directory_path = filedialog.askdirectory()  # Open directory dialog
    if directory_path:  # If directory path is selected
        directory_entry.delete(0, tk.END)  # Clear directory entry
        directory_entry.insert(0, directory_path)  # Insert directory path into entry

def scan_gui(hash_algorithm):
    """Initiate the scanning process."""
    # Disable the scan more button while scanning is in progress
    scan_more_button.config(state=tk.DISABLED)
    path = directory_entry.get()  # Get path from entry
    if os.path.isfile(path):  # If path is a file
        known_signatures = build_signature_database(malware_directory, hash_algorithm)  # Build signature database
        progress_var = tk.DoubleVar()  # Initialize progress variable
        Thread(target=scan_file, args=(path, known_signatures, progress_var, results_text, 1, "", hash_algorithm)).start()  # Start scanning in a separate thread
    elif os.path.isdir(path):   # If path is a directory
        known_signatures = build_signature_database(malware_directory, hash_algorithm)  # Build signature database
        progress_var = tk.DoubleVar()  # Initialize progress variable
        Thread(target=scan_directory, args=(path, known_signatures, progress_var, hash_algorithm)).start()  # Start scanning in a separate thread
    else:
        messagebox.showerror("Error", "Invalid path!")  # Show error message for invalid path

def scan_more():
    """Reset UI elements related to scanning."""
    results_text.delete(1.0, tk.END)  # Clear scan results
    directory_entry.delete(0, tk.END)  # Clear directory entry
    progress_bar['value'] = 0  # Reset progress bar
    progress_label.config(text="")  # Reset progress label

def pause_scan():
    """Pause the scanning process."""
    global scan_paused
    scan_paused = True  # Set pause flag

def stop_scan():
    """Stop the scanning process."""
    global scan_stopped
    scan_stopped = True  # Set stop flag

if __name__ == "__main__":
    malware_directory = '/path/to/malware/samples'  # Path to directory containing malware samples

    root = tk.Tk()  # Create tkinter root window
    root.title("Malware Scanner ")  # Set window title
    root.geometry("800x410")  # Set window size

    # Styling
    root.configure(bg="#f0f0f1")  # Set background color

    # Label and entry for file/directory selection
    directory_label = tk.Label(root, text="File/Directory to Scan:", bg="#f0f0f0", font=("Helvetica", 12))  # Label for entry
    directory_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")  # Grid placement
    directory_entry = tk.Entry(root, width=50, font=("Helvetica", 10))  # Entry for file/directory path
    directory_entry.grid(row=0, column=1, padx=10, pady=5)  # Grid placement
    browse_file_button = tk.Button(root, text="Browse File", command=browse_file, bg="#4caf50", fg="white", font=("Helvetica", 10))  # Button to browse file
    browse_file_button.grid(row=0, column=2, padx=5, pady=5)  # Grid placement
    browse_directory_button = tk.Button(root, text="Browse Directory", command=browse_directory, bg="#4caf50", fg="white", font=("Helvetica", 10))  # Button to browse directory
    browse_directory_button.grid(row=0, column=3, padx=5, pady=5)  # Grid placement

    # Hash algorithm selection
    hash_algorithm_label = tk.Label(root, text="Select Hash Algorithm:", bg="#f0f0f0", font=("Helvetica", 12))  # Label for hash algorithm selection
    hash_algorithm_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")  # Grid placement
    hash_algorithm_var = tk.StringVar(value="sha256")  # Default to SHA-256
    hash_algorithm_options = ["sha256", "md5", "sha1", "sha512", "crc32"]  # Available hash algorithms
    hash_algorithm_dropdown = ttk.Combobox(root, textvariable=hash_algorithm_var, values=hash_algorithm_options, state="readonly", width=10)  # Dropdown for hash algorithm selection
    hash_algorithm_dropdown.grid(row=1, column=1, padx=10, pady=5)  # Grid placement

    # Scan button
    scan_button = tk.Button(root, text="Scan", command=lambda: scan_gui(hash_algorithm_var.get()), bg="#008CBA", fg="white", font=("Helvetica", 12))  # Button to initiate scanning
    scan_button.grid(row=2, column=1, padx=10, pady=5)  # Grid placement

    # Progress bar
    progress_bar = ttk.Progressbar(root, orient='horizontal', length=300, mode='determinate')  # Progress bar for scanning progress
    progress_bar.grid(row=3, columnspan=4, padx=10, pady=5)  # Grid placement

    # Progress percentage label
    progress_label = tk.Label(root, text="", bg="#f0f0f0", font=("Helvetica", 10))  # Label to display progress percentage
    progress_label.grid(row=3, column=1, padx=5, pady=5, sticky="w")  # Grid placement

    # Scan results
    results_label = tk.Label(root, text="Scan Results:", bg="#f0f0f0", font=("Helvetica", 12))  # Label for scan results
    results_label.grid(row=4, column=0, padx=10, pady=5, sticky="w")  # Grid placement
    results_text = tk.Text(root, width=60, height=10, font=("Helvetica", 10))  # Text box to display scan results
    results_text.grid(row=5, column=0, columnspan=4, padx=10, pady=5, sticky="w")  # Grid placement
    results_text.config(state=tk.NORMAL)  # Allow editing

    # Buttons to pause, stop, and scan more
    pause_button = tk.Button(root, text="Pause", command=pause_scan, bg="#f44336", fg="white", font=("Helvetica", 12))  # Button to pause scanning
    pause_button.grid(row=6, column=0, padx=10, pady=5)  # Grid placement
    stop_button = tk.Button(root, text="Stop", command=stop_scan, bg="#f44336", fg="white", font=("Helvetica", 12))  # Button to stop scanning
    stop_button.grid(row=6, column=1, padx=10, pady=5)  # Grid placement
    scan_more_button = tk.Button(root, text="Scan More", command=scan_more, bg="#4caf50", fg="white", font=("Helvetica", 12))  # Button to scan more
    scan_more_button.grid(row=6, column=2, padx=10, pady=5)  # Grid placement

    root.mainloop()  # Start tkinter event loop
